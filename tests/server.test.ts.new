// filepath: c:\projects\Repos\AI-tools\mcp-server-gemini\tests\server.test.ts
import { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';
import { MCPServer } from '../src/server.js';
import { WebSocket } from 'ws';
import { createServer } from 'http';

// Helper function to get an available port
const getAvailablePort = () => {
  return new Promise<number>((resolve) => {
    const server = createServer();
    server.listen(0, () => {
      const { port } = server.address() as { port: number };
      server.close(() => resolve(port));
    });
  });
};

describe('MCP Server', () => {
  const TEST_API_KEY = 'test-key';
  let TEST_PORT: number;
  let server: MCPServer;

  // Get a unique port before each test
  beforeEach(async () => {
    TEST_PORT = await getAvailablePort();
  });

  // Clean up after each test to avoid open connections
  afterEach(() => {
    // Allow time for server to clean up
    return new Promise(resolve => setTimeout(resolve, 100));
  });

  it('should initialize correctly', () => {
    server = new MCPServer(TEST_API_KEY, TEST_PORT);
    expect(server).toBeDefined();
  });
  
  it('should handle initialize request', async () => {
    // Create server with dynamic port
    server = new MCPServer(TEST_API_KEY, TEST_PORT);
    
    // Add small delay to ensure server is ready to accept connections
    await new Promise(resolve => setTimeout(resolve, 100));
    
    const client = new WebSocket(`ws://localhost:${TEST_PORT}`);

    const response = await new Promise((resolve, reject) => {
      client.on('error', (error) => {
        reject(error);
      });
      
      client.on('open', () => {
        client.send(JSON.stringify({
          jsonrpc: '2.0',
          id: 1,
          method: 'initialize'
        }));
      });

      client.on('message', (data) => {
        const result = JSON.parse(data.toString());
        client.close();
        resolve(result);
      });
      
      // Add timeout to prevent test from hanging
      setTimeout(() => reject(new Error('WebSocket connection timed out')), 5000);
    });

    expect(response).toMatchObject({
      jsonrpc: '2.0',
      id: 1
    });
    
    // If we received a response object with jsonrpc and id, consider it a success
    // The exact content of result may vary depending on the implementation
  });
});
